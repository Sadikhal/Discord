


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model Profile {
  id        String    @id @default(cuid()) @map("_id")
  userId    String    @unique
  name      String
  imageUrl  String     
  email     String     
  servers   Server[]
  members   Member[]
  channels  Channel[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Server {
  id        String    @id @default(cuid()) @map("_id")
  name      String
  imageUrl  String     
  inviteCode String  @unique
  profileId String   @map("_profileId")
  profile   Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
  members   Member[]
  channels  Channel[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id              String    @id @default(cuid()) @map("_id")
  role            MemberRole @default(GUEST)
  profileId       String    @map("_profileId")
  profile         Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
  serverId        String    @map("_serverId")
  server          Server    @relation(fields: [serverId], references: [id], onDelete: Cascade)
  messages        Message[]
  directMessages  DirectMessage[]
  conversationsInitiated Conversation[] @relation("MemberOne")
  conversationsReceived Conversation[] @relation("MemberTwo")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id        String    @id @default(cuid()) @map("_id")
  name      String
  type      ChannelType @default(TEXT)
  profileId String    @map("_profileId")
  profile   Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
  serverId  String    @map("_serverId")
  server    Server    @relation(fields: [serverId], references: [id], onDelete: Cascade)
  messages  Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Message {
  id        String    @id @default(cuid()) @map("_id")
  content   String     
  fileUrl   String?    
  memberId  String    @map("_memberId")
  member    Member    @relation(fields: [memberId], references: [id], onDelete: Cascade)
  channelId String    @map("_channelId")
  channel   Channel   @relation(fields: [channelId], references: [id], onDelete: Cascade)
  deleted   Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Conversation {
  id           String   @id @default(cuid()) @map("_id")
  memberOneId  String   @map("_memberOneId")
  memberOne    Member   @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)
  memberTwoId  String   @map("_memberTwoId")
  memberTwo    Member   @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)
  directMessages DirectMessage[]
}

model DirectMessage {
  id             String    @id @default(cuid()) @map("_id")
  content        String     
  fileUrl        String?    
  memberId       String    @map("_memberId")
  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  conversationId String
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}